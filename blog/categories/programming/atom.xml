<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | @vladfr]]></title>
  <link href="http://vladfr.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://vladfr.github.io/"/>
  <updated>2014-12-12T11:04:34+02:00</updated>
  <id>http://vladfr.github.io/</id>
  <author>
    <name><![CDATA[Vlad Frățilă]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slow and Steady Wins the Race]]></title>
    <link href="http://vladfr.github.io/blog/2014/12/08/slow-and-steady-wins-the-race/"/>
    <updated>2014-12-08T12:45:44+02:00</updated>
    <id>http://vladfr.github.io/blog/2014/12/08/slow-and-steady-wins-the-race</id>
    <content type="html"><![CDATA[<p>As I grow as a programmer, I realize that what worked until now might not work in the future.</p>

<p>Learning new languages gets faster with time, but I wonder if it&rsquo;s worth it. New frameworks are great after the first 10 minutes. Then you realize it doesn&rsquo;t solve actual problems &ndash; it&rsquo;s just different. Or, if it does away with the clumsy old ways, it brings new challenges into the mix. This dance is becoming tedious.</p>

<p>The ever-faster rhythm of change makes me stick to my guns when coding, but I also go slower about it. As I progress, I tend to stop and think more &ndash; hopefully, producing better code.</p>

<p>Here&rsquo;s two interesting reads on the topic via #hackernewsletter: <a href="http://buff.ly/1G4G1UO">Java for everything</a> and <a href="http://buff.ly/1w2ohX7">The Case for Slow Programming</a>
Thoughts?</p>
]]></content>
  </entry>
  
</feed>
